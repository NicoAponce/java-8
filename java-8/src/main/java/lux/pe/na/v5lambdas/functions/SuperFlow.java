package lux.pe.na.v5lambdas.functions;import lux.pe.na.v5lambdas.interfaces.IFunction;import lux.pe.na.v5lambdas.interfaces.IOperatorBinary;import lux.pe.na.v5lambdas.interfaces.IPredicate;import lux.pe.na.v5lambdas.interfaces.IProvider;import java.util.ArrayList;import java.util.List;public class SuperFlow<T> {    private final List<T> values;    public SuperFlow(List<T> values) {        this.values = values;    }    public SuperFlow<T> filter(IPredicate<T> predicate) {        List<T> result = new ArrayList<>();        for (T value : values) {            if (predicate.test(value)) {                result.add(value);            }        }        return new SuperFlow<>(result);    }    public static <T> SuperFlow<T> provide(int size, IProvider<T> provider) {        List<T> result = new ArrayList<>();        for (int i = 0; i < size; i++) {            result.add(provider.get());        }        return new SuperFlow<>(result);    }    public <R> SuperFlow<R> transform(IFunction<T, R> function) {        List<R> result = new ArrayList<>();        for (T value : values) {            result.add(function.apply(value));        }        return new SuperFlow<>(result);    }    public T sum(T id, IOperatorBinary<T> binaryFunction) {        T total = id;        for (T vaIue : values) {            total = binaryFunction.apply(total, vaIue);        }        return total;    }    @Override    public String toString() {        return values.toString();    }}