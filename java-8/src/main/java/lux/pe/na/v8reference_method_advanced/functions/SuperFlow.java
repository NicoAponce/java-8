package lux.pe.na.v8reference_method_advanced.functions;import java.util.ArrayList;import java.util.Comparator;import java.util.List;import java.util.function.BinaryOperator;import java.util.function.Function;import java.util.function.Predicate;import java.util.function.Supplier;public class SuperFlow<T> {    private final List<T> values;    public SuperFlow(List<T> values) {        this.values = values;    }    public SuperFlow<T> filter(Predicate<T> predicate) {        List<T> result = new ArrayList<>();        for (T value : values) {            if (predicate.test(value)) {                result.add(value);            }        }        return new SuperFlow<>(result);    }    public static <T> SuperFlow<T> provide(int size, Supplier<T> provider) {        List<T> result = new ArrayList<>();        for (int i = 0; i < size; i++) {            result.add(provider.get());        }        return new SuperFlow<>(result);    }    public <R> SuperFlow<R> transform(Function<T, R> function) {        List<R> result = new ArrayList<>();        for (T value : values) {            result.add(function.apply(value));        }        return new SuperFlow<>(result);    }    public T sum(T id, BinaryOperator<T> binaryFunction) {        T total = id;        for (T vaIue : values) {            total = binaryFunction.apply(total, vaIue);        }        return total;    }    public SuperFlow<T> order(Comparator<T> comparator) {        List<T> list = new ArrayList<>(values);        list.sort(comparator);        return new SuperFlow<>(list);    }    @Override    public String toString() {        return values.toString();    }}