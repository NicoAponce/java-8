package lux.pe.na.v3generic.functions;import lux.pe.na.v3generic.interfaces.*;import java.util.ArrayList;import java.util.List;public class SuperFunction {    public static <T> List<T> filter(List<T> numbers, IPredicate<T> predicate) {        List<T> result = new ArrayList<>();        for (T value : numbers) {            if (predicate.test(value)) {                result.add(value);            }        }        return result;    }    public static <T> List<T> provide(int size, IProvider<T> provider) {        List<T> result = new ArrayList<>();        for (int i = 0; i < size; i++) {            result.add(provider.get());        }        return result;    }    public static <T, R> List<R> transform(List<T> values, IFunction<T, R> function) {        List<R> result = new ArrayList<>();        for (T value : values) {            result.add(function.apply(value));        }        return result;    }    public static <T> T sum(List<T> values, T id, IOperatorBinary<T> binaryFunction) {        T total = id;        for (T vaIue : values) {            total = binaryFunction.apply(total, vaIue);        }        return total;    }}